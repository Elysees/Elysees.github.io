<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪村唯</title>
  
  <subtitle>为美好的世界献上祝福</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://deepsnow.top/"/>
  <updated>2019-10-29T06:44:21.769Z</updated>
  <id>https://deepsnow.top/</id>
  
  <author>
    <name>雪村唯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac电脑下C++环境报错处理</title>
    <link href="https://deepsnow.top/2019/10/29/Mac%E7%94%B5%E8%84%91%E4%B8%8BC-%E7%8E%AF%E5%A2%83%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>https://deepsnow.top/2019/10/29/Mac电脑下C-环境报错处理/</id>
    <published>2019-10-29T05:01:32.000Z</published>
    <updated>2019-10-29T06:44:21.769Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇关于Mac电脑环境搭建问题的文章</p><a id="more"></a><h1 id="Mac电脑下C-环境报错处理"><a href="#Mac电脑下C-环境报错处理" class="headerlink" title="Mac电脑下C++环境报错处理"></a>Mac电脑下C++环境报错处理</h1><p>mac电脑一直是我的生产力工具，除了玩游戏的任何其他事情我都是在mac上完成的，从MacBook Air更换到MacBook Pro之后我遇到了如下问题：每次编译Cpp文件的时候都会提示<code>iostream</code>头文件不存在,提示如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/include/stdint.h:2:10: error: #include nested too deeply</span><br><span class="line"></span><br><span class="line">    #include &lt;stddef.h&gt;</span><br><span class="line"></span><br><span class="line">             ^</span><br><span class="line"></span><br><span class="line">    /usr/local/include/stdint.h:59:11: error: #include nested too deeply</span><br><span class="line"></span><br><span class="line">    # include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">              ^</span><br><span class="line"></span><br><span class="line">    /usr/local/include/stdint.h:72:11: error: #include nested too deeply</span><br><span class="line"></span><br><span class="line">    # include &lt;sys/types.h&gt;</span><br><span class="line"></span><br><span class="line">              ^</span><br><span class="line"></span><br><span class="line">    /usr/local/include/stdint.h:76:10: error: #include nested too deeply</span><br><span class="line"></span><br><span class="line">    #include &lt;limits.h&gt;</span><br><span class="line"></span><br><span class="line">             ^</span><br><span class="line"></span><br><span class="line">    /usr/local/include/stdint.h:82:11: error: #include nested too deeply</span><br><span class="line"></span><br><span class="line">    # include &lt;inttypes.h&gt;</span><br><span class="line"></span><br><span class="line">              ^</span><br></pre></td></tr></table></figure><p>遇到这样的情况我是真的头大，在网上找了各种各样的办法，有重装xcode的，有安装xcode command line工具的··· 反正我都试过了，没一个起作用的。最后实在没办法，搜了一下关于<code>stdint.h</code>文件的相关知识，发现其关联文件会导致头文件失效的情况出现，于是乎解决办法来了。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>依次在终端里键入以下命令：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew unlink libunistring</span><br><span class="line">brew uninstall libunistring</span><br><span class="line">sudo rm /usr/local/include/stdint.h</span><br><span class="line">brew install libunistring</span><br></pre></td></tr></table></figure><p>ok,这样一来不管是xcode还是vscode还是coderunner都能正常编译运行cpp辣。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇关于Mac电脑环境搭建问题的文章&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Computer" scheme="https://deepsnow.top/tags/Computer/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络知识点总结</title>
    <link href="https://deepsnow.top/2019/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://deepsnow.top/2019/10/24/计算机网络知识点总结/</id>
    <published>2019-10-24T07:55:04.000Z</published>
    <updated>2019-10-29T06:44:38.795Z</updated>
    
    <content type="html"><![CDATA[<p>这是一些计算机网络的知识点总结。</p><a id="more"></a><h2 id="计算机网络知识点"><a href="#计算机网络知识点" class="headerlink" title="计算机网络知识点"></a>计算机网络知识点</h2><h3 id="http与https有何区别？"><a href="#http与https有何区别？" class="headerlink" title="http与https有何区别？"></a>http与https有何区别？</h3><p>  <strong>http与https的主要区别如下：</strong></p><ul><li>https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ul><h3 id="http与https的一些基本概念"><a href="#http与https的一些基本概念" class="headerlink" title="http与https的一些基本概念"></a>http与https的一些基本概念</h3><p>  http :是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p>  https :是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><p>  https协议的主要作用可以分为两种 :一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><h3 id="http与https的主要特点和工作流程"><a href="#http与https的主要特点和工作流程" class="headerlink" title="http与https的主要特点和工作流程"></a>http与https的主要特点和工作流程</h3><p>  <strong>http特点</strong></p><p>  1.支持客户/服务器模式。（C/S模式）</p><p>  2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p><p>  3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p><p>  4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><p>  5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</p><p>  <strong>http工作流程</strong> </p><p>   第一步：建立TCP/IP连接，客户端与服务器通过Socket三次握手进行连接</p><p>   第二步：客户端向服务端发起HTTP请求（例如：POST/login.html http/1.1）</p><p>   第三步：客户端发送请求头信息，请求内容，最后会发送一空白行，标示客户端请求完毕</p><p>   第四步：服务器做出应答，表示对于客户端请求的应答，例如：HTTP/1.1 200 OK</p><p>   第五步：服务器向客户端发送应答头信息</p><p>   第六步：服务器向客户端发送请求头信息后，也会发送一空白行，标示应答头信息发送完毕，接着就以Content-type要求的数据格式发送数据给客户端</p><p>   第七步：服务端关闭TCP连接，如果服务器或者客户端增Connection:keep-alive就表示客户端与服务器端继续保存连接，在下次请求时可以继续使用这次的连接</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一些计算机网络的知识点总结。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Computer Network" scheme="https://deepsnow.top/tags/Computer-Network/"/>
    
  </entry>
  
  <entry>
    <title>03-Python字符串+变量</title>
    <link href="https://deepsnow.top/2019/10/24/03-Python%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%8F%98%E9%87%8F/"/>
    <id>https://deepsnow.top/2019/10/24/03-Python字符串-变量/</id>
    <published>2019-10-24T02:11:53.000Z</published>
    <updated>2019-10-29T06:45:37.269Z</updated>
    
    <content type="html"><![CDATA[<p>Python基础系列 第3篇～</p><a id="more"></a><h1 id="03-Python字符串-变量"><a href="#03-Python字符串-变量" class="headerlink" title="03-Python字符串+变量"></a>03-Python字符串+变量</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>转义字符</li><li>格式化</li><li>内建函数（后延）</li></ul><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><ul><li>用一个特殊的方法便是出一系列不方便写出的内容，比如回车键，换行键，退格键</li><li>借助反斜杠字符，一旦字符串中出现反斜杠，则反斜杠后面一个或者几个字符表示已经不是原来的意思了，进行了转义</li><li>在字符串中，一旦出现反斜杠就要加倍小心，可能有转义字符出现</li><li>不同的系统对换行有不同的表示<ul><li>Windows： \n</li><li>Linux： \r\n<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;i love you&quot;</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>运行结果为：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i love you</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 如果想表示出Let‘s go来</span><br><span class="line"># 1. 可以使用嵌套引号，即外层使用双引号</span><br><span class="line"># 2. 转义字符</span><br><span class="line">s = &quot;Let&apos;s go&quot;</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line">#\&apos; == &apos;</span><br><span class="line">ss = &apos;Let\&apos;s go&apos;</span><br><span class="line">print(ss)</span><br><span class="line"></span><br><span class="line"># \\ = \</span><br><span class="line">sss = &quot;c:\\user&quot;</span><br><span class="line">print(sss)</span><br><span class="line"></span><br><span class="line"># 回车换行符</span><br><span class="line">s1 = &quot;I love \r\n you&quot;</span><br><span class="line">print(s1)</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Let&apos;s go</span><br><span class="line">Let&apos;s go</span><br><span class="line">c:\user</span><br><span class="line">I love </span><br><span class="line"> you</span><br></pre></td></tr></table></figure><h2 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h2><ul><li>把字符串按照一定格式打印或者填充</li><li>格式化有两种方法<ul><li>利用百分号（%）</li><li>利用format函数</li></ul></li></ul><h3 id="利用百分号格式化"><a href="#利用百分号格式化" class="headerlink" title="利用百分号格式化"></a>利用百分号格式化</h3><ul><li>在字符串中，利用%表示一个特殊的含义，表示对字符串进行格式化</li><li>%d：此处应该放入一个整数</li><li>%s：此处应该放入一个字符串<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;I love %s&quot;</span><br><span class="line"># 下面打印，直接把%s作为字符串的一个内容打印出来</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I love %s</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;I love %s&quot;%&quot;you&quot;)</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I love you</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;I am %d years old&quot;</span><br><span class="line"># 留意下面两句话的区别和结果</span><br><span class="line">print(s)</span><br><span class="line">print(s%18)</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I am %d years old</span><br><span class="line">I am 18 years old</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;I am %s, i am %d years old&quot;</span><br><span class="line">print(s)</span><br><span class="line"># 注意以下表达的出错原因</span><br><span class="line"># 如果字符串中由占位符，则由几个占位符必须用几个实际内容代替，或者一个也不要</span><br><span class="line">#print(s%&quot;a&quot;)</span><br><span class="line"># 如果出现多个占位符，则相应内容需要用括号括起来</span><br><span class="line">print(s%(&quot;a&quot;, 18))</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I am %s, i am %d years old</span><br><span class="line">I am a, i am 18 years old</span><br></pre></td></tr></table></figure></li></ul><h3 id="format函数格式化字符串"><a href="#format函数格式化字符串" class="headerlink" title="format函数格式化字符串"></a>format函数格式化字符串</h3><ul><li>直接使用format函数进行格式化</li><li>推荐使用这种方法</li><li>在使用上，以{}和：代替%号，后面用format带参数完成<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;I love &#123;&#125;&quot;.format(&quot;you&quot;)</span><br><span class="line">print(s)</span><br><span class="line">s = &quot;Yes, i am &#123;1&#125; years old, I love &#123;0&#125; and i am &#123;1&#125; years old&quot;.format(&quot;ABC&quot;, 18)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love you</span><br><span class="line">Yes, i am 18 years old, I love ABC and i am 18 years old</span><br></pre></td></tr></table></figure></li></ul><h2 id="None"><a href="#None" class="headerlink" title="None"></a>None</h2><ul><li>表示什么都没有</li><li>如果函数没有返回值，可以返回None</li><li>用来占位置</li><li>用来解除变量绑定</li></ul><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><ul><li>由一个或者几个数字或者变量和运算符组合成的一行代码</li><li>通常会返回一个结果 # 运算符</li><li>由一个以上的值经过变化得到新值的过程就叫运算</li><li>用于运算的符号叫运算符</li><li>运算符分类：<ul><li>算数运算符</li><li>比较或者关系运算符</li><li>赋值运算符</li><li>逻辑运算符<ul><li>位运算</li></ul></li><li>成员运算</li><li>身份运算符<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3></li></ul></li><li>进行算数运算的符号</li><li>python没有自增自减运算符<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># +,-跟正常算术运算符一模一样</span><br><span class="line">a = 9+3-2</span><br><span class="line">print(a)</span><br><span class="line"># 乘号用星号(*)代替</span><br><span class="line">a = 9 * 4</span><br><span class="line">print(a)</span><br><span class="line"># 除号用斜杠(/)代替</span><br><span class="line"># 在Python2.x 和python3.x 中，除号(/)结果可能不一致，此处以3系列为准</span><br><span class="line">a = 9/4</span><br><span class="line">print(a)</span><br><span class="line"># % 取余运算</span><br><span class="line"># 两个数字相除应该有商数有余数</span><br><span class="line"># % 只会得到余数</span><br><span class="line">a = 9 % 4</span><br><span class="line">print(a)</span><br><span class="line"># // 表示取商运算，也叫地板除</span><br><span class="line">a = 9 // 4</span><br><span class="line">print(a)</span><br><span class="line"># ** 表示幂运算</span><br><span class="line">a = 9 ** 4</span><br><span class="line">print(a)</span><br><span class="line">a = 3 ** 3</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">36</span><br><span class="line">2.25</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">6561</span><br><span class="line">27</span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3></li><li>对两个变量或者值进行比较的运算符</li><li>对于比较结果是布尔值<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># == , 等于号</span><br><span class="line">a = 3 ** 4</span><br><span class="line"># 下面语句执行书序是</span><br><span class="line"># 1， 计算 a == 80</span><br><span class="line"># 2. 把结果放入b中</span><br><span class="line">b = a == 80</span><br><span class="line">print(b)</span><br><span class="line"># != 不等于</span><br><span class="line">print( 9 != 8 )</span><br><span class="line"># &gt; 大于</span><br><span class="line"># &lt; 小于</span><br><span class="line"># &gt;= 大于等于</span><br><span class="line"># &lt;= 小于等于</span><br></pre></td></tr></table></figure>运行结果:<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># = , 赋值</span><br><span class="line">a = 0</span><br><span class="line">c = a = 4</span><br><span class="line"></span><br><span class="line"># +=, 是缩写，</span><br><span class="line">a = 0</span><br><span class="line">a += 7 # a = a+ 7 的缩写</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 所有数学运算符都有缩写形式</span><br><span class="line"># -=， ×=， /=, //=, %=, **=,都是缩写形式</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li>对布尔值进行计算的符号</li><li>and 逻辑与</li><li>or 逻辑或</li><li>not 逻辑非</li><li>python中逻辑运算没有异或运算</li><li>运算规则：<ul><li>and看做乘法， or看做加法，</li><li>True看做1， False看做0</li><li>则逻辑运算就能转换成整数数学运算</li><li>最后结果如果是0则为False， 否则为True</li></ul></li><li>逻辑运算的短路问题<ul><li>逻辑运算式，按照运算顺序计算，一旦能够确定整个式子未来的值，则不再进行计算，直接返回<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 逻辑运算符案例</span><br><span class="line">a = True</span><br><span class="line">b = False</span><br><span class="line">c = True</span><br><span class="line"># 以下式子等价于 d = 1 * 0 + 1</span><br><span class="line">d = a and b or c</span><br><span class="line">print(d)</span><br><span class="line">d = a or b and a</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 逻辑运算的短路案例</span><br><span class="line"># 下面的逻辑表达式，a的值一定是True，则运行到or的时候，整个表达式不在向下计算</span><br><span class="line">a = True or xxxxxxxxxxx</span><br><span class="line"># 下面表达式，如果xxx中包含赋值表达式，则结果很难预期</span><br><span class="line"># 代码示例（伪代码)</span><br><span class="line">b = 0</span><br><span class="line">a = a or (b=9) and 6</span><br><span class="line"># 假定上面表达式如果没有语法错误</span><br><span class="line"># 则b最终的值应该是0而不是9</span><br><span class="line">print(b)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> File &quot;&lt;ipython-input-43-bb4253784911&gt;&quot;, line 9</span><br><span class="line">    a = a or (b=9) and 6</span><br><span class="line">               ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><h2 id="成员运算符号"><a href="#成员运算符号" class="headerlink" title="成员运算符号"></a>成员运算符号</h2></li></ul></li><li>用来检测某一个变量是否是另一个变量的成员</li><li>in</li><li>not in<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 案例</span><br><span class="line">l = [1,2,3,4,5]</span><br><span class="line">a = 7</span><br><span class="line">b = a in l</span><br><span class="line">print(b)</span><br><span class="line">a = 4</span><br><span class="line">print(a in l)</span><br><span class="line">print(a not in l)</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li></ul><h3 id="身份运算"><a href="#身份运算" class="headerlink" title="身份运算"></a>身份运算</h3><ul><li>is: 用来检测两个变量是否是同一个变量<ul><li>语法就是 var1 is var2</li></ul></li><li>is not: 两个变量不是同一个变量<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 9</span><br><span class="line">b = 9</span><br><span class="line">print( a is b)</span><br><span class="line">a = &quot;I love you&quot;</span><br><span class="line">b = &quot;I love you&quot;</span><br><span class="line">print( a is b)</span><br></pre></td></tr></table></figure>运算结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li></ul><h2 id="运算符优先级问题"><a href="#运算符优先级问题" class="headerlink" title="运算符优先级问题"></a>运算符优先级问题</h2><ul><li>永远记住，括号具有最高优先级</li><li>优先级表格<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">**  指数 (最高优先级)</span><br><span class="line">~ + -   按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</span><br><span class="line">* / % //    乘，除，取模和取整除</span><br><span class="line">+ - 加法减法</span><br><span class="line">&gt;&gt; &lt;&lt;   右移，左移运算符</span><br><span class="line">&amp;   位 &apos;AND&apos;</span><br><span class="line">^ | 位运算符</span><br><span class="line">&lt;= &lt; &gt; &gt;=   比较运算符</span><br><span class="line">&lt;&gt; == !=    等于运算符</span><br><span class="line">= %= /= //= -= += *= **=    赋值运算符</span><br><span class="line">is is not   身份运算符</span><br><span class="line">in not in   成员运算符</span><br><span class="line">not or and  逻辑运算符</span><br></pre></td></tr></table></figure></li></ul><h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><ul><li>顺序</li><li>分支</li><li>循环</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python基础系列 第3篇～&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://deepsnow.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>02-Python基础</title>
    <link href="https://deepsnow.top/2019/10/24/02-Python%E5%9F%BA%E7%A1%80/"/>
    <id>https://deepsnow.top/2019/10/24/02-Python基础/</id>
    <published>2019-10-24T02:05:50.000Z</published>
    <updated>2019-10-29T06:43:59.368Z</updated>
    
    <content type="html"><![CDATA[<p>Python基础系列第二篇～</p><a id="more"></a><h1 id="Pyhon基础"><a href="#Pyhon基础" class="headerlink" title="Pyhon基础"></a>Pyhon基础</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><ul><li>推荐虚拟机+Ubuntu</li><li>套件推荐 Anaconda3+Pycharm</li><li>如果机器内存大于4G，推荐虚拟机下启动</li><li>如果机器内存小于，推荐用Windows/mac下的Anaconda+pycharm</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>机器不去执行注释内容</li><li>注释一般用自然语言书写</li><li>注释的写法：<ul><li>行注释：以’#’开头，可以单独行，也可以在某行代码后边</li><li>块注释：好几行代码或者内容，以三个连续的单引号或者双引号开始和结束，中间人和内容机器都忽略<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#代码的作用</span><br><span class="line">#1·给人看</span><br><span class="line">#2·给机器看</span><br><span class="line">#注释是春给人看的内容</span><br><span class="line">print(&apos;hello,world&apos;)</span><br><span class="line">#打印hello,world出来</span><br></pre></td></tr></table></figure>上述代码运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello,world</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>程序=数据结构+算法</li><li>变量就是可以重复使用的一个量，或者叫一个代号</li><li>变量命名的规则<ul><li>变量命名可以包含数字，大小写字母，下划线或者更多，但我们不推荐除了前三种内容之外的符号</li><li>数字不可以打头<ul><li>4man，5for是不可以的</li><li>man4，for5是可以的</li></ul></li><li>一般在python中，一下划线开头的内容具有特殊意义，不建议使用<ul><li>比如<em>age</em>,_name，理论是可以的，但强烈不推荐，包括但不限于一个下划线和两个连续下划线开头</li></ul></li><li>大小写不一样，俗称大小写敏感<ul><li>Forman与forman不是同一个变量名称</li></ul></li><li>推荐<ul><li>使用具有固定含义的英文单词或者缩写。srv=server skt=socket，一般以posix命令规则为主</li><li>驼峰命名法<ul><li>名称以单词自动连接，且每个单词首字母大写<ul><li>大驼峰，每一个单词首字母均大写<ul><li>在python中给类命名使用此法</li><li>MyFirstApp，IntOne</li></ul></li><li>小驼峰，类似大驼峰，但第一个字母小写<ul><li>myFirstApp，intOne</li></ul></li><li>posix写法<ul><li>多个单词用下划线连接</li><li>单词全部小写</li><li>my_first_love,int_one</li></ul></li></ul></li></ul></li></ul></li><li>保留字和关键字<ul><li>变量命名必须避开，不能跟关键字和保留字重复。</li><li>class def break for<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看关键字的方法：</span><br><span class="line">import keyword #引入关键字模块</span><br><span class="line">#打印出系统全部关键字</span><br><span class="line">print(keyword,kwlist)</span><br></pre></td></tr></table></figure>上述代码运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ul><li>var_name = var_value</li><li>var1 = var2 = var3 = var_value</li><li>var1,var2,var3 = v1,v2,v3<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 定义变量age，把18放入变量age中</span><br><span class="line">age = 18</span><br><span class="line">print(age)</span><br><span class="line">print(18)</span><br><span class="line"># 给age1， age2， age3 放入同样一个内容或值</span><br><span class="line">age1 = age2 = age3 = 18</span><br><span class="line">print(age1)</span><br><span class="line">print(age2)</span><br><span class="line">print(age3)</span><br><span class="line"># 一行内给多个变量赋值</span><br><span class="line">age4, age5, age6 = 12, 21, 45</span><br><span class="line">print(age4)</span><br><span class="line">print(age5)</span><br><span class="line">print(age6)</span><br></pre></td></tr></table></figure>上述代码运行结果:<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">18</span><br><span class="line">18</span><br><span class="line">18</span><br><span class="line">18</span><br><span class="line">18</span><br><span class="line">12</span><br><span class="line">21</span><br><span class="line">45</span><br></pre></td></tr></table></figure></li></ul><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul><li>严格意义上，python只有一个类型</li><li>标准数据一共六种：<ul><li>数字类型number</li><li>字符串类型str</li><li>列表list</li><li>元组tuple</li><li>字典Dictionary</li><li>集合set</li></ul></li></ul><h3 id="Number数字类型"><a href="#Number数字类型" class="headerlink" title="Number数字类型"></a>Number数字类型</h3><ul><li>数字类型没有大小限制</li><li>没有小数部分，表示个数的数字</li><li>自然数，0，负自然数</li><li>整数分进制<ul><li>二进制<ul><li>计算机常用</li><li>是计算机唯一能理解的数字</li><li>表示为0b开头的01代码</li><li>例如0b001，0b10010</li></ul></li><li>八进制<ul><li>不常用</li><li>以0o开头的包含0~7的数字</li></ul></li><li>十六进制<ul><li>逢16进1</li><li>其实是每四位二进制表示一位16进制数</li><li>包含0<del>0，a</del>f</li><li>数字以0x开头</li></ul></li><li>十进制<ul><li>18，89，178<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = 18</span><br><span class="line">print(18)</span><br><span class="line">age = 0b10010</span><br><span class="line">print(age)</span><br><span class="line">age = 0o102</span><br><span class="line">print(age)</span><br><span class="line">age = 0xff #十六进制ff表示二进制的1111 1111</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure>上述代码运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">18</span><br><span class="line">18</span><br><span class="line">66</span><br><span class="line">255</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul><li>小数</li><li>计算机里面表示浮点数可以有条件省略</li><li>3.1415</li><li>3.</li><li>0.5</li><li>.5</li><li>科学计数法<ul><li>定义跟数学定义</li><li>写法是e/E后面跟整数表示10的指数</li><li>176.23 = 1.7623e2</li><li>0.876 = 8.76e-1<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">height = 156.34</span><br><span class="line">print(height)</span><br><span class="line">shili = .2</span><br><span class="line">print(shili)</span><br><span class="line">shili = .6</span><br><span class="line">print(shili)</span><br></pre></td></tr></table></figure>上述代码运行结果：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">156.34</span><br><span class="line">0.2</span><br><span class="line">0.6</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><ul><li>定义同数学一致</li><li>一个由实部与虚部构成的数字</li><li>虚部用i/j表示</li><li>5+3j</li><li>3j</li><li>（3j）</li></ul><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><ul><li>表示真假的值</li><li>只有两个值，True/False</li><li>布尔值可以直接跟数字进行操作<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#布尔值操作</span><br><span class="line">age = 18 + True</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure>打印结果为：19</li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>用来表示遗一串文字信息</li><li>如何表示<ul><li>单引号</li><li>双引号</li><li>三引号(三个单引号或者三个双引号)<ul><li>能够扩起多行信息</li></ul></li><li>单双引号交错使用<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">love = &quot;i love you&quot;</span><br><span class="line">print(love)</span><br><span class="line">love = &apos;you&apos;</span><br><span class="line">print(love)</span><br><span class="line"># 单双引号交错使用的例子</span><br><span class="line"># 用引号表示上面字符串</span><br><span class="line">htmls =  &apos;&apos;&apos;</span><br><span class="line">i love you</span><br><span class="line">我爱你</span><br><span class="line">哈哈哈哈哈</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">print(htmls)</span><br></pre></td></tr></table></figure>运行结果为：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i love you</span><br><span class="line">you</span><br><span class="line">i love you</span><br><span class="line">我爱你</span><br><span class="line">哈哈哈哈哈</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python基础系列第二篇～&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://deepsnow.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>01-Python基础</title>
    <link href="https://deepsnow.top/2019/10/24/01-Python%E5%9F%BA%E7%A1%80/"/>
    <id>https://deepsnow.top/2019/10/24/01-Python基础/</id>
    <published>2019-10-24T01:42:37.000Z</published>
    <updated>2019-10-29T06:43:38.757Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇python介绍</p><a id="more"></a><h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><h2 id="Python概述"><a href="#Python概述" class="headerlink" title="Python概述"></a>Python概述</h2><ul><li>计算机语言概述<ul><li>语言：交流的工具，沟通媒介。</li><li>计算机语言：人跟计算机交流的工具，翻译官。</li><li>Python是计算机语言的一种。</li><li>Python编程语言<ul><li>代码：人类语言，通过代码命令机器，跟机器交流。</li><li>Python解释器：就是担任翻译的工具。</li><li>流程<ul><li>写代码</li><li>执行：由Python解释器把命令（code）翻译给机器，同时把机器结果翻译给用户。</li></ul></li></ul></li><li>Python简史<ul><li>1989年，由Guido Van Rossum设计问世。</li><li>2008年：Python3.X诞生，与Python2.X不兼容。</li><li>2014年：宣布2.7支持到2020。</li><li>2017年：AI元年，Python崛起。</li></ul></li><li>Python特点<ul><li>速度问题</li><li>Python跟其他语言的选择问题。</li></ul></li><li>Python应用领域<ul><li>全能</li><li>设计哲学：平衡发展，样样通，简洁明了。<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = list</span><br><span class="line">for i in range(len(l))</span><br><span class="line">print(l(i))</span><br></pre></td></tr></table></figure></li></ul></li><li>Python为什么这么火<ul><li>会不会持续火</li><li>人工智能问题</li><li>Java的普适性</li></ul></li><li>环境问题<ul><li>anaconda+pycharm</li><li>python3.X</li></ul></li><li>Pyhon的执行方式<ul><li>本质上是一堆命令的集合<ul><li>逐行执行，遇到问题即刻中止。</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇python介绍&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://deepsnow.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Github Page 穷人的最好选择（并不</title>
    <link href="https://deepsnow.top/2019/10/24/Github-Page-%E7%A9%B7%E4%BA%BA%E7%9A%84%E6%9C%80%E5%A5%BD%E9%80%89%E6%8B%A9%EF%BC%88%E5%B9%B6%E4%B8%8D/"/>
    <id>https://deepsnow.top/2019/10/24/Github-Page-穷人的最好选择（并不/</id>
    <published>2019-10-24T00:12:47.000Z</published>
    <updated>2019-10-29T06:44:32.354Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇杂谈，记录GitHub Page搭建博客的过程。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>记得我的第一篇博客是用VPS+Wordpress搭建的，用了一段时间后觉得不是很轻量，就换成了Typecho，现在感觉经费不足，就选择拿Github Page来试水，原因很简单，免费。白嫖（并不。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>首先是准备环境，Windows和Mac都可以，需要安装Git 和 node.js环境。具体操作如下：</p><ul><li><p>Windows直接去官网下载安装包。</p></li><li><p>Linux和MacOS也可以去官网下载环境pkg安装，或者利用命令行都可。</p></li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>打开命令行<br> <figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>新建一个文件夹，当作blog文件夹，cd进入文件夹进行初始化操作。</p> <figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>利用此步骤，生成相应的静态文件，这样才可以部署到远程服务器上。<br> <figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3> <figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p> 启动后提示默认网址为 <code>http://localhost:4000</code><br> 在浏览器打开就可以看到部署好的网页啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇杂谈，记录GitHub Page搭建博客的过程。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Life" scheme="https://deepsnow.top/tags/Life/"/>
    
  </entry>
  
</feed>
