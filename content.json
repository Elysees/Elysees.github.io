{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"01-Python基础","text":"这是一篇python介绍 Python基础Python概述 计算机语言概述 语言：交流的工具，沟通媒介。 计算机语言：人跟计算机交流的工具，翻译官。 Python是计算机语言的一种。 Python编程语言 代码：人类语言，通过代码命令机器，跟机器交流。 Python解释器：就是担任翻译的工具。 流程 写代码 执行：由Python解释器把命令（code）翻译给机器，同时把机器结果翻译给用户。 Python简史 1989年，由Guido Van Rossum设计问世。 2008年：Python3.X诞生，与Python2.X不兼容。 2014年：宣布2.7支持到2020。 2017年：AI元年，Python崛起。 Python特点 速度问题 Python跟其他语言的选择问题。 Python应用领域 全能 设计哲学：平衡发展，样样通，简洁明了。123l = listfor i in range(len(l)) print(l(i)) Python为什么这么火 会不会持续火 人工智能问题 Java的普适性 环境问题 anaconda+pycharm python3.X Pyhon的执行方式 本质上是一堆命令的集合 逐行执行，遇到问题即刻中止。","link":"/2019/10/24/01-Python%E5%9F%BA%E7%A1%80/"},{"title":"02-Python基础","text":"Python基础系列第二篇～ Pyhon基础环境安装 推荐虚拟机+Ubuntu 套件推荐 Anaconda3+Pycharm 如果机器内存大于4G，推荐虚拟机下启动 如果机器内存小于，推荐用Windows/mac下的Anaconda+pycharm 注释 机器不去执行注释内容 注释一般用自然语言书写 注释的写法： 行注释：以’#’开头，可以单独行，也可以在某行代码后边 块注释：好几行代码或者内容，以三个连续的单引号或者双引号开始和结束，中间人和内容机器都忽略123456#代码的作用#1·给人看#2·给机器看#注释是春给人看的内容print(&apos;hello,world&apos;)#打印hello,world出来 上述代码运行结果：1hello,world 变量 程序=数据结构+算法 变量就是可以重复使用的一个量，或者叫一个代号 变量命名的规则 变量命名可以包含数字，大小写字母，下划线或者更多，但我们不推荐除了前三种内容之外的符号 数字不可以打头 4man，5for是不可以的 man4，for5是可以的 一般在python中，一下划线开头的内容具有特殊意义，不建议使用 比如age,_name，理论是可以的，但强烈不推荐，包括但不限于一个下划线和两个连续下划线开头 大小写不一样，俗称大小写敏感 Forman与forman不是同一个变量名称 推荐 使用具有固定含义的英文单词或者缩写。srv=server skt=socket，一般以posix命令规则为主 驼峰命名法 名称以单词自动连接，且每个单词首字母大写 大驼峰，每一个单词首字母均大写 在python中给类命名使用此法 MyFirstApp，IntOne 小驼峰，类似大驼峰，但第一个字母小写 myFirstApp，intOne posix写法 多个单词用下划线连接 单词全部小写 my_first_love,int_one 保留字和关键字 变量命名必须避开，不能跟关键字和保留字重复。 class def break for1234#查看关键字的方法：import keyword #引入关键字模块#打印出系统全部关键字print(keyword,kwlist) 上述代码运行结果：1[&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;] 变量声明 var_name = var_value var1 = var2 = var3 = var_value var1,var2,var3 = v1,v2,v31234567891011121314# 定义变量age，把18放入变量age中age = 18print(age)print(18)# 给age1， age2， age3 放入同样一个内容或值age1 = age2 = age3 = 18print(age1)print(age2)print(age3)# 一行内给多个变量赋值age4, age5, age6 = 12, 21, 45print(age4)print(age5)print(age6) 上述代码运行结果:123456781818181818122145 变量类型 严格意义上，python只有一个类型 标准数据一共六种： 数字类型number 字符串类型str 列表list 元组tuple 字典Dictionary 集合set Number数字类型 数字类型没有大小限制 没有小数部分，表示个数的数字 自然数，0，负自然数 整数分进制 二进制 计算机常用 是计算机唯一能理解的数字 表示为0b开头的01代码 例如0b001，0b10010 八进制 不常用 以0o开头的包含0~7的数字 十六进制 逢16进1 其实是每四位二进制表示一位16进制数 包含00，af 数字以0x开头 十进制 18，89，17812345678age = 18print(18)age = 0b10010print(age)age = 0o102print(age)age = 0xff #十六进制ff表示二进制的1111 1111print(age) 上述代码运行结果：1234181866255 浮点数 小数 计算机里面表示浮点数可以有条件省略 3.1415 3. 0.5 .5 科学计数法 定义跟数学定义 写法是e/E后面跟整数表示10的指数 176.23 = 1.7623e2 0.876 = 8.76e-1123456height = 156.34print(height)shili = .2print(shili)shili = .6print(shili) 上述代码运行结果：123156.340.20.6 复数 定义同数学一致 一个由实部与虚部构成的数字 虚部用i/j表示 5+3j 3j （3j） 布尔值 表示真假的值 只有两个值，True/False 布尔值可以直接跟数字进行操作123#布尔值操作age = 18 + Trueprint(age) 打印结果为：19 字符串 用来表示遗一串文字信息 如何表示 单引号 双引号 三引号(三个单引号或者三个双引号) 能够扩起多行信息 单双引号交错使用123456789101112love = &quot;i love you&quot;print(love)love = &apos;you&apos;print(love)# 单双引号交错使用的例子# 用引号表示上面字符串htmls = &apos;&apos;&apos;i love you我爱你哈哈哈哈哈&apos;&apos;&apos;print(htmls) 运行结果为：12345i love youyoui love you我爱你哈哈哈哈哈","link":"/2019/10/24/02-Python%E5%9F%BA%E7%A1%80/"},{"title":"03-Python字符串+变量","text":"Python基础系列 第3篇～ 03-Python字符串+变量字符串 转义字符 格式化 内建函数（后延） 转义字符 用一个特殊的方法便是出一系列不方便写出的内容，比如回车键，换行键，退格键 借助反斜杠字符，一旦字符串中出现反斜杠，则反斜杠后面一个或者几个字符表示已经不是原来的意思了，进行了转义 在字符串中，一旦出现反斜杠就要加倍小心，可能有转义字符出现 不同的系统对换行有不同的表示 Windows： \\n Linux： \\r\\n12s = &quot;i love you&quot;print(s) 运行结果为：1i love you 1234567891011121314151617# 如果想表示出Let‘s go来# 1. 可以使用嵌套引号，即外层使用双引号# 2. 转义字符s = &quot;Let&apos;s go&quot;print(s)#\\&apos; == &apos;ss = &apos;Let\\&apos;s go&apos;print(ss)# \\\\ = \\sss = &quot;c:\\\\user&quot;print(sss)# 回车换行符s1 = &quot;I love \\r\\n you&quot;print(s1) 运行结果为： 123456Let&apos;s goLet&apos;s goc:\\userI love you 字符串的格式化 把字符串按照一定格式打印或者填充 格式化有两种方法 利用百分号（%） 利用format函数 利用百分号格式化 在字符串中，利用%表示一个特殊的含义，表示对字符串进行格式化 %d：此处应该放入一个整数 %s：此处应该放入一个字符串123s = &quot;I love %s&quot;# 下面打印，直接把%s作为字符串的一个内容打印出来print(s) 运行结果：1I love %s 1print(&quot;I love %s&quot;%&quot;you&quot;) 运行结果：1I love you 1234s = &quot;I am %d years old&quot;# 留意下面两句话的区别和结果print(s)print(s%18) 运行结果：12I am %d years oldI am 18 years old 1234567s = &quot;I am %s, i am %d years old&quot;print(s)# 注意以下表达的出错原因# 如果字符串中由占位符，则由几个占位符必须用几个实际内容代替，或者一个也不要#print(s%&quot;a&quot;)# 如果出现多个占位符，则相应内容需要用括号括起来print(s%(&quot;a&quot;, 18)) 运行结果：12I am %s, i am %d years oldI am a, i am 18 years old format函数格式化字符串 直接使用format函数进行格式化 推荐使用这种方法 在使用上，以{}和：代替%号，后面用format带参数完成1234s = &quot;I love {}&quot;.format(&quot;you&quot;)print(s)s = &quot;Yes, i am {1} years old, I love {0} and i am {1} years old&quot;.format(&quot;ABC&quot;, 18)print(s) 运行结果：12I love youYes, i am 18 years old, I love ABC and i am 18 years old None 表示什么都没有 如果函数没有返回值，可以返回None 用来占位置 用来解除变量绑定 表达式 由一个或者几个数字或者变量和运算符组合成的一行代码 通常会返回一个结果 # 运算符 由一个以上的值经过变化得到新值的过程就叫运算 用于运算的符号叫运算符 运算符分类： 算数运算符 比较或者关系运算符 赋值运算符 逻辑运算符 位运算 成员运算 身份运算符算数运算符 进行算数运算的符号 python没有自增自减运算符1234567891011121314151617181920212223# +,-跟正常算术运算符一模一样a = 9+3-2print(a)# 乘号用星号(*)代替a = 9 * 4print(a)# 除号用斜杠(/)代替# 在Python2.x 和python3.x 中，除号(/)结果可能不一致，此处以3系列为准a = 9/4print(a)# % 取余运算# 两个数字相除应该有商数有余数# % 只会得到余数a = 9 % 4print(a)# // 表示取商运算，也叫地板除a = 9 // 4print(a)# ** 表示幂运算a = 9 ** 4print(a)a = 3 ** 3print(a) 运行结果：123456710362.2512656127 比较运算符 对两个变量或者值进行比较的运算符 对于比较结果是布尔值12345678910111213# == , 等于号a = 3 ** 4# 下面语句执行书序是# 1， 计算 a == 80# 2. 把结果放入b中b = a == 80print(b)# != 不等于print( 9 != 8 )# &gt; 大于# &lt; 小于# &gt;= 大于等于# &lt;= 小于等于 运行结果:12FalseTrue 赋值运算符123456789101112# = , 赋值a = 0c = a = 4# +=, 是缩写，a = 0a += 7 # a = a+ 7 的缩写print(a)# 所有数学运算符都有缩写形式# -=， ×=， /=, //=, %=, **=,都是缩写形式 运行结果： 17 逻辑运算符 对布尔值进行计算的符号 and 逻辑与 or 逻辑或 not 逻辑非 python中逻辑运算没有异或运算 运算规则： and看做乘法， or看做加法， True看做1， False看做0 则逻辑运算就能转换成整数数学运算 最后结果如果是0则为False， 否则为True 逻辑运算的短路问题 逻辑运算式，按照运算顺序计算，一旦能够确定整个式子未来的值，则不再进行计算，直接返回123456789# 逻辑运算符案例a = Trueb = Falsec = True# 以下式子等价于 d = 1 * 0 + 1d = a and b or cprint(d)d = a or b and aprint(d) 运行结果：12TrueTrue 1234567891011# 逻辑运算的短路案例# 下面的逻辑表达式，a的值一定是True，则运行到or的时候，整个表达式不在向下计算a = True or xxxxxxxxxxx# 下面表达式，如果xxx中包含赋值表达式，则结果很难预期# 代码示例（伪代码)b = 0a = a or (b=9) and 6# 假定上面表达式如果没有语法错误# 则b最终的值应该是0而不是9print(b)print(a) 运行结果：1234 File &quot;&lt;ipython-input-43-bb4253784911&gt;&quot;, line 9 a = a or (b=9) and 6 ^SyntaxError: invalid syntax 成员运算符号 用来检测某一个变量是否是另一个变量的成员 in not in12345678# 案例l = [1,2,3,4,5]a = 7b = a in lprint(b)a = 4print(a in l)print(a not in l) 运行结果：123FalseTrueFalse 身份运算 is: 用来检测两个变量是否是同一个变量 语法就是 var1 is var2 is not: 两个变量不是同一个变量123456a = 9b = 9print( a is b)a = &quot;I love you&quot;b = &quot;I love you&quot;print( a is b) 运算结果：12TrueFalse 运算符优先级问题 永远记住，括号具有最高优先级 优先级表格12345678910111213** 指数 (最高优先级)~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)* / % // 乘，除，取模和取整除+ - 加法减法&gt;&gt; &lt;&lt; 右移，左移运算符&amp; 位 &apos;AND&apos;^ | 位运算符&lt;= &lt; &gt; &gt;= 比较运算符&lt;&gt; == != 等于运算符= %= /= //= -= += *= **= 赋值运算符is is not 身份运算符in not in 成员运算符not or and 逻辑运算符 程序结构 顺序 分支 循环","link":"/2019/10/24/03-Python%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%8F%98%E9%87%8F/"},{"title":"Github Page 穷人的最好选择（并不","text":"这是一篇杂谈，记录GitHub Page搭建博客的过程。 写在前面记得我的第一篇博客是用VPS+Wordpress搭建的，用了一段时间后觉得不是很轻量，就换成了Typecho，现在感觉经费不足，就选择拿Github Page来试水，原因很简单，免费。白嫖（并不。 环境准备首先是准备环境，Windows和Mac都可以，需要安装Git 和 node.js环境。具体操作如下： Windows直接去官网下载安装包。 Linux和MacOS也可以去官网下载环境pkg安装，或者利用命令行都可。 Hexo安装打开命令行 1$ npm install -g hexo-cli 初始化新建一个文件夹，当作blog文件夹，cd进入文件夹进行初始化操作。 1$ hexo init 生成静态文件利用此步骤，生成相应的静态文件，这样才可以部署到远程服务器上。 1$ hexo g 启动服务 1$ hexo s 启动后提示默认网址为 http://localhost:4000 在浏览器打开就可以看到部署好的网页啦。","link":"/2019/10/24/Github-Page-%E7%A9%B7%E4%BA%BA%E7%9A%84%E6%9C%80%E5%A5%BD%E9%80%89%E6%8B%A9%EF%BC%88%E5%B9%B6%E4%B8%8D/"},{"title":"Mac电脑下C++环境报错处理","text":"这是一篇关于Mac电脑环境搭建问题的文章 Mac电脑下C++环境报错处理mac电脑一直是我的生产力工具，除了玩游戏的任何其他事情我都是在mac上完成的，从MacBook Air更换到MacBook Pro之后我遇到了如下问题：每次编译Cpp文件的时候都会提示iostream头文件不存在,提示如下： 1234567891011121314151617181920212223242526272829/usr/local/include/stdint.h:2:10: error: #include nested too deeply #include &lt;stddef.h&gt; ^ /usr/local/include/stdint.h:59:11: error: #include nested too deeply # include &lt;stdint.h&gt; ^ /usr/local/include/stdint.h:72:11: error: #include nested too deeply # include &lt;sys/types.h&gt; ^ /usr/local/include/stdint.h:76:10: error: #include nested too deeply #include &lt;limits.h&gt; ^ /usr/local/include/stdint.h:82:11: error: #include nested too deeply # include &lt;inttypes.h&gt; ^ 遇到这样的情况我是真的头大，在网上找了各种各样的办法，有重装xcode的，有安装xcode command line工具的··· 反正我都试过了，没一个起作用的。最后实在没办法，搜了一下关于stdint.h文件的相关知识，发现其关联文件会导致头文件失效的情况出现，于是乎解决办法来了。 解决办法依次在终端里键入以下命令： 1234brew unlink libunistringbrew uninstall libunistringsudo rm /usr/local/include/stdint.hbrew install libunistring ok,这样一来不管是xcode还是vscode还是coderunner都能正常编译运行cpp辣。","link":"/2019/10/29/Mac%E7%94%B5%E8%84%91%E4%B8%8BC-%E7%8E%AF%E5%A2%83%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"},{"title":"计算机网络知识点总结","text":"这是一些计算机网络的知识点总结。 计算机网络知识点http与https有何区别？ http与https的主要区别如下： https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。 http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。 http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。 http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。 http与https的一些基本概念 http :是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。 https :是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 https协议的主要作用可以分为两种 :一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。 http与https的主要特点和工作流程 http特点 1.支持客户/服务器模式。（C/S模式） 2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。 3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。 4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快 http工作流程 第一步：建立TCP/IP连接，客户端与服务器通过Socket三次握手进行连接 第二步：客户端向服务端发起HTTP请求（例如：POST/login.html http/1.1） 第三步：客户端发送请求头信息，请求内容，最后会发送一空白行，标示客户端请求完毕 第四步：服务器做出应答，表示对于客户端请求的应答，例如：HTTP/1.1 200 OK 第五步：服务器向客户端发送应答头信息 第六步：服务器向客户端发送请求头信息后，也会发送一空白行，标示应答头信息发送完毕，接着就以Content-type要求的数据格式发送数据给客户端 第七步：服务端关闭TCP连接，如果服务器或者客户端增Connection:keep-alive就表示客户端与服务器端继续保存连接，在下次请求时可以继续使用这次的连接","link":"/2019/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Life","slug":"Life","link":"/tags/Life/"},{"name":"Computer","slug":"Computer","link":"/tags/Computer/"},{"name":"Computer Network","slug":"Computer-Network","link":"/tags/Computer-Network/"}],"categories":[]}